package edu.duke.ece651.classbuilder;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;

import org.json.JSONArray;
import org.json.JSONObject;

public class ClassBuilder {

  private HashMap<String, HashMap<String, ArrayList<String>>> class_map;
  private String package_name;
  private String language_suffix;
  
  public ClassBuilder(String input) {
    JSONObject JSONObj = new JSONObject(input);
    package_name = getPackageName(JSONObj);
    class_map = getClassMap(JSONObj);
    language_suffix = ".java";
  }

  // get package name
  private String getPackageName(JSONObject JSONObj) {
    if (JSONObj.has("package")) {
      return JSONObj.getString("package");
    } else {
      return  null;
    }
  }

  // get classes into a map
  private HashMap<String, HashMap<String, ArrayList<String>>> getClassMap(JSONObject JSONObj) {
    HashMap<String, HashMap<String, ArrayList<String>>> classMap = new HashMap<>();x
    for (int i = 0; i < JSONObj.getJSONArray("classes").length(); i++) {
      JSONObject cl = JSONObj.getJSONArray("classes").getJSONObject(i);
      String cn = cl.getString("name");
      JSONArray fields = cl.getJSONArray("fileds");
      // get all the fields' name and type within a class
      HashMap<String, ArrayList<String>> fields_map = new HashMap<>();
      for (int j = 0; j < fields.length(); j++) {
        JSONObject field = fields.getJSONObject(j);
        String field_name = field.getString("name");
        String field_type = field.getString("type");

        if (fields_map.containsKey(field_type)) {
          fields_map.get(field_type).add(field_name);
        } else { // this is a new field type
          ArrayList<String> name_list = new ArrayList<>();
          name_list.add(field_name);
          fields_map.put(field_type, name_list);
        }
      }
      class_map.put(cn, fields_map) ;
    }
    return class_map;
  }
    
  //public ClassBuilder (InputStream input);
    
  public Collection<String> getClassNames() {
    Collection<String> nameList = new ArrayList<>();
    for (String className: class_map.keySet() ) {
      nameList.add(className);
    }
    return nameList;
  }
    
  public String getSourceCode(String class_name) {
    return JavaCodingEngine.createJavaClassCode(class_name, class_map);
  }
  
  
  void createAllClasses(String basePath) {
    // create the Deserializer class
    String deserializer_code = getSourceCode("Deserializer");
    writeStringToFile(deserializer_code, basePath, "Deserializer" + language_suffix);
    
    // create all other classes
    for (String class_name : class_map.keySet()) {
      String ordinary_class_code = getSourceCode(class_name);
      writeStringToFile(ordinary_class_code, basePath, class_name + language_suffix);
    }
  }

  void writeStringToFile(String content, String path, String filename) {    
    try {
      // if the path does not exist: create that path
      File dirs = new File(path);
      if (!dirs.exists()) {
        dirs.mkdirs();
      }
      // create output stream and overwrite to a designated filename
      FileOutputStream out = new FileOutputStream(path+filename, false);
      out.write(content.getBytes());
      out.close();
    }
    catch (IOException exception) {
      exception.printStackTrace();
    }
  }
}
